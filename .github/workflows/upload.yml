name: Download from GoFile Folder and Upload to GitHub Release

on:
  workflow_dispatch:
    inputs:
      gofile_folder_url:
        description: "The GoFile folder link"
        required: true
        type: string

  push:
    tags:
      - "v*"          # Automatically triggers on pushing a tag starting with "v" (e.g., v1.0)

jobs:
  download_and_release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Extract Folder Code from GoFile Link
        id: extract_folder_code
        run: |
          # Extract the folder code from the GoFile link (last part of the URL)
          folder_url="${{ github.event.inputs.gofile_folder_url }}"
          folder_code="${folder_url##*/}"
          echo "Folder code: $folder_code"
          echo "folder_code=$folder_code" >> $GITHUB_ENV

      - name: Get Files in GoFile Folder
        id: get_files
        env:
          GOFILE_API_URL: "https://api.gofile.io/getContent"
        run: |
          # Get file list from GoFile API
          response=$(curl -s "${GOFILE_API_URL}?contentId=${folder_code}&token=&websiteToken=websiteToken&cache=true")
          file_urls=$(echo "$response" | jq -r '.data.contents | .[] | .link')
          file_names=$(echo "$response" | jq -r '.data.contents | .[] | .name')
          
          # Save URLs and names as newlines separated lists
          echo "$file_urls" > file_urls.txt
          echo "$file_names" > file_names.txt
          
      - name: Download Files from GoFile
        run: |
          # Download each file using the URLs in file_urls.txt
          while IFS= read -r url && IFS= read -r name <&3; do
            wget -O "$name" "$url"
          done < file_urls.txt 3<file_names.txt

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name || 'manual-release' }}  # Use tag if available, otherwise 'manual-release'
          release_name: "Release ${{ github.ref_name || 'manual-release' }}"
          draft: false
          prerelease: false

      - name: Upload Files to GitHub Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./
          asset_name: "{{ filename }}"
          asset_content_type: application/octet-stream
        run: |
          # Upload each downloaded file to the release
          while IFS= read -r name; do
            actions/upload-release-asset@v1 upload_url="${{ steps.create_release.outputs.upload_url }}" \
              asset_path="./$name" \
              asset_name="$name" \
              asset_content_type="application/octet-stream"
          done < file_names.txt
